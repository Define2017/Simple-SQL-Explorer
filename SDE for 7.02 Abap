*&---------------------------------------------------------------------*
*& Report YS_SDE - Simple Data Explorer
*& version: alpha 0.1.104.84
*& Written by Yurii Sychov
*& e-mail:   ysichov@gmail.com
*& skype:    ysichov
*& blog:     https://ysychov.wordpress.com/blog/
*& LinkedIn: https://www.linkedin.com/in/ysychov/
*&---------------------------------------------------------------------*
REPORT YS_SDE.
TYPES:
  BEGIN OF T_SEL_ROW,
    SIGN        TYPE TVARV_SIGN,
    OPTI        TYPE TVARV_OPTI,
    OPTION_ICON TYPE AQADH_TYPE_OF_ICON,
    LOW         TYPE AQADH_RANGE_VALUE,
    HIGH        TYPE AQADH_RANGE_VALUE,
    MORE_ICON   TYPE AQADH_TYPE_OF_ICON,
    RANGE       TYPE AQADH_T_RANGES,
  END OF T_SEL_ROW.

PARAMETERS: GV_TNAME TYPE TABNAME.

"Begin of INCLUDE YS_SDE_CLASSES.
CLASS LCL_TABLE_VIEWER DEFINITION DEFERRED.
CLASS LCL_BOX_HANDLER  DEFINITION DEFERRED.
CLASS LCL_DATA_TRANSMITTER DEFINITION DEFERRED.
CLASS LCL_SEL_OPT DEFINITION DEFERRED.

CLASS LCL_DD_DATA DEFINITION."drag&drop data
  PUBLIC  SECTION.
    DATA: M_ROW    TYPE I,
          M_COLUMN TYPE LVC_S_COL.
ENDCLASS.                    "lcl_dd_data DEFINITION

CLASS LCL_DRAGDROP DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      DRAG FOR EVENT ONDRAG OF CL_GUI_ALV_GRID
        IMPORTING ES_ROW_NO E_DRAGDROPOBJ E_ROW E_COLUMN ,
      DROP FOR EVENT ONDROP OF CL_GUI_ALV_GRID
        IMPORTING ES_ROW_NO E_DRAGDROPOBJ E_ROW.
ENDCLASS.                    "lcl_dragdrop DEFINITION

CLASS LCL_SQL DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      READ_TABLE IMPORTING I_TABNAME   TYPE TABNAME
                           I_WHERE     TYPE STRING
                           I_ROW_COUNT TYPE I OPTIONAL
                 CHANGING  CR_TAB      TYPE REF TO DATA
                           C_COUNT     TYPE I.
ENDCLASS.                    "lcl_sql DEFINITION

CLASS LCL_SQL IMPLEMENTATION.
  METHOD READ_TABLE.
    FIELD-SYMBOLS: <F_TAB> TYPE ANY TABLE.

    ASSIGN CR_TAB->* TO <F_TAB>.
    IF I_WHERE IS NOT INITIAL.
      TRY.
          SELECT * FROM (I_TABNAME) INTO TABLE <F_TAB> WHERE (I_WHERE) ORDER BY PRIMARY KEY.
        CATCH CX_SY_DYNAMIC_OSQL_SEMANTICS.
        CATCH CX_SY_DYNAMIC_OSQL_SYNTAX.
        CATCH CX_SY_CONVERSION_NO_NUMBER.
      ENDTRY.
    ELSE.
      IF I_ROW_COUNT IS NOT SUPPLIED.
        SELECT * FROM (I_TABNAME) INTO TABLE <F_TAB>.
      ELSE.
        SELECT * FROM (I_TABNAME) INTO TABLE <F_TAB> UP TO I_ROW_COUNT ROWS.
      ENDIF.
    ENDIF.
    C_COUNT = SY-DBCNT.
  ENDMETHOD.                    "read_table
ENDCLASS.                    "lcl_sql IMPLEMENTATION

CLASS LCL_ALV_COMMON DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      REFRESH IMPORTING I_OBJ TYPE REF TO CL_GUI_ALV_GRID,
      TRANSLATE_FIELD IMPORTING I_LANG LIKE SY-UCOMM OPTIONAL CHANGING C_FLD TYPE LVC_S_FCAT.
ENDCLASS.                    "lcl_alv_common DEFINITION

CLASS LCL_ALV_COMMON IMPLEMENTATION.

  METHOD REFRESH.
    DATA L_STABLE TYPE LVC_S_STBL.
    L_STABLE-ROW = 'X'.
    L_STABLE-COL = 'X'.
    I_OBJ->REFRESH_TABLE_DISPLAY( EXPORTING IS_STABLE = L_STABLE ).
  ENDMETHOD.                    "refresh

  METHOD TRANSLATE_FIELD.
    DATA: LV_LANG       LIKE SY-LANGU,
          LT_FIELD_INFO TYPE TABLE OF DFIES.

    IF I_LANG IS NOT SUPPLIED.
      LV_LANG = SY-LANGU.
    ELSE.
      CALL FUNCTION 'CONVERSION_EXIT_ISOLA_INPUT'
        EXPORTING
          INPUT            = I_LANG
        IMPORTING
          OUTPUT           = LV_LANG
        EXCEPTIONS
          UNKNOWN_LANGUAGE = 1
          OTHERS           = 2.
    ENDIF.

    CALL FUNCTION 'DDIF_FIELDINFO_GET'
      EXPORTING
        TABNAME        = C_FLD-REF_TABLE
        FIELDNAME      = C_FLD-FIELDNAME
        LANGU          = LV_LANG
      TABLES
        DFIES_TAB      = LT_FIELD_INFO
      EXCEPTIONS
        NOT_FOUND      = 1
        INTERNAL_ERROR = 2
        OTHERS         = 3.

    IF SY-SUBRC = 0.
      DATA: L_INFO TYPE DFIES.
      READ TABLE LT_FIELD_INFO INDEX 1 INTO L_INFO.
      IF L_INFO-SCRTEXT_L IS INITIAL AND L_INFO-SCRTEXT_M IS INITIAL AND L_INFO-SCRTEXT_S IS INITIAL.
        MOVE L_INFO-FIELDTEXT TO: C_FLD-REPTEXT, C_FLD-SCRTEXT_L, C_FLD-SCRTEXT_M, C_FLD-SCRTEXT_S .
      ELSE.
        C_FLD-SCRTEXT_L = L_INFO-SCRTEXT_L.
        C_FLD-SCRTEXT_M = L_INFO-SCRTEXT_M.
        C_FLD-SCRTEXT_S = L_INFO-SCRTEXT_S.
        C_FLD-REPTEXT   = L_INFO-REPTEXT.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    "translate_field
ENDCLASS.                    "lcl_alv_common IMPLEMENTATION

CLASS LCL_APPL DEFINITION.
  PUBLIC SECTION.

    TYPES: BEGIN OF SIGN_OPTION_ICON_S,
             SIGN          TYPE TVARV_SIGN,
             OPTION        TYPE TVARV_OPTI,
             ICON_NAME(64) TYPE C,
             ICON          TYPE AQADH_TYPE_OF_ICON,
           END OF SIGN_OPTION_ICON_S,

           BEGIN OF T_OBJ,
             ALV_VIEWER TYPE REF TO LCL_TABLE_VIEWER,
           END OF T_OBJ,

           BEGIN OF T_LANG,
             SPRAS TYPE SPRAS,
             SPTXT TYPE SPTXT,
           END OF T_LANG  .

    CLASS-DATA: M_OPTION_ICONS     TYPE TABLE OF SIGN_OPTION_ICON_S,
                MT_LANG            TYPE TABLE OF T_LANG,
                MT_OBJ             TYPE TABLE OF T_OBJ, "main object table
                M_CTRL_BOX_HANDLER TYPE REF TO LCL_BOX_HANDLER,
                C_DRAGDROPALV      TYPE REF TO CL_DRAGDROP.

    CLASS-METHODS:
      INIT_ICONS_TABLE,
      INIT_LANG,
      SUPPRESS_RUN_BUTTON,
      F4,
      EXIST_TABLE IMPORTING I_TAB LIKE GV_TNAME RETURNING VALUE(E_SUBRC) LIKE SY-SUBRC.
ENDCLASS.                    "lcl_appl DEFINITION

CLASS LCL_CREATE_DATA DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      CREATE_TABLE IMPORTING I_TNAME TYPE TABNAME CHANGING C_TABLE TYPE REF TO DATA.
ENDCLASS.                    "lcl_create_data DEFINITION

CLASS LCL_CREATE_DATA IMPLEMENTATION.
  METHOD CREATE_TABLE.

    FIELD-SYMBOLS: <F_TAB>   TYPE ANY TABLE.
* Dynamic Table creation
    DATA: LO_STRUCT   TYPE REF TO CL_ABAP_STRUCTDESCR,
          LO_NEW_TYPE TYPE REF TO CL_ABAP_STRUCTDESCR,
          LO_NEW_TAB  TYPE REF TO CL_ABAP_TABLEDESCR,
          LO_TYPE     TYPE REF TO CL_ABAP_TYPEDESCR,
          LT_COMP     TYPE CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE.

*...............Dynamic Internal Table........................*
* 1. Getting Components from existing type
    CALL METHOD CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME
      EXPORTING
        P_NAME         = I_TNAME
      RECEIVING
        P_DESCR_REF    = LO_TYPE
      EXCEPTIONS
        TYPE_NOT_FOUND = 1
        OTHERS         = 2.

    IF SY-SUBRC NE 0.
      MESSAGE 'Table Structure not found'(001) TYPE 'E' DISPLAY LIKE 'I'.
    ENDIF.

    LO_STRUCT ?= LO_TYPE.
    LT_COMP  = LO_STRUCT->GET_COMPONENTS( ).

* 3. Create a New Type
    LO_NEW_TYPE = CL_ABAP_STRUCTDESCR=>CREATE( LT_COMP ).
* 4. New Table type
    LO_NEW_TAB = CL_ABAP_TABLEDESCR=>CREATE(
                    P_LINE_TYPE  = LO_NEW_TYPE
                    P_TABLE_KIND = CL_ABAP_TABLEDESCR=>TABLEKIND_STD
                    P_UNIQUE     = ABAP_FALSE ).

* 5. data to handle the new table type
    CREATE DATA C_TABLE TYPE HANDLE LO_NEW_TAB.
* 6. New internal table in the fieldsymbols
    ASSIGN C_TABLE->* TO <F_TAB>.
  ENDMETHOD.                    "create_table
ENDCLASS.                    "lcl_create_data IMPLEMENTATION

CLASS LCL_DATA_TRANSMITTER DEFINITION.
  PUBLIC SECTION.
    EVENTS: DATA_CHANGED EXPORTING VALUE(E_ROW) TYPE T_SEL_ROW,
             COL_CHANGED EXPORTING VALUE(E_COLUMN) TYPE LVC_FNAME.
    METHODS: EMIT IMPORTING E_ROW TYPE T_SEL_ROW,
      EMIT_COL IMPORTING E_COLUMN TYPE LVC_FNAME.
ENDCLASS.                    "lcl_data_transmitter DEFINITION

CLASS LCL_DATA_TRANSMITTER IMPLEMENTATION.
  METHOD  EMIT.
    RAISE EVENT DATA_CHANGED EXPORTING E_ROW = E_ROW.
  ENDMETHOD.                    "emit

  METHOD EMIT_COL.
    RAISE EVENT COL_CHANGED EXPORTING E_COLUMN = E_COLUMN.
  ENDMETHOD.                    "emit_col
ENDCLASS.                    "lcl_data_transmitter IMPLEMENTATION

CLASS LCL_DATA_RECEIVER DEFINITION.
  PUBLIC SECTION.
    DATA: MO_TRANSMITTER TYPE REF TO LCL_DATA_TRANSMITTER,
          LO_TAB_FROM    TYPE REF TO LCL_TABLE_VIEWER,
          LO_SEL_TO      TYPE REF TO LCL_SEL_OPT,
          M_FROM_FIELD   TYPE LVC_FNAME,
          M_TO_FIELD     TYPE LVC_FNAME.
    METHODS: CONSTRUCTOR
      IMPORTING IO_TRANSMITTER TYPE REF TO LCL_DATA_TRANSMITTER OPTIONAL
                IO_TAB_FROM    TYPE REF TO LCL_TABLE_VIEWER OPTIONAL
                IO_SEL_TO      TYPE REF TO LCL_SEL_OPT OPTIONAL
                I_FROM_FIELD   TYPE LVC_FNAME OPTIONAL
                I_TO_FIELD     TYPE LVC_FNAME OPTIONAL,
      SHUT_DOWN,
      UPDATE FOR EVENT DATA_CHANGED OF LCL_DATA_TRANSMITTER IMPORTING E_ROW,
      UPDATE_COL FOR EVENT COL_CHANGED OF LCL_DATA_TRANSMITTER IMPORTING E_COLUMN,
      ON_GRID_BUTTON_CLICK
            FOR EVENT BUTTON_CLICK OF CL_GUI_ALV_GRID
        IMPORTING
            ES_COL_ID
            ES_ROW_NO.
ENDCLASS.                    "lcl_data_receiver DEFINITION

CLASS LCL_SEL_OPT DEFINITION.
  PUBLIC SECTION.
    TYPES:
      BEGIN OF SELECTION_DISPLAY_S,
        IND         TYPE I,
        FIELD_LABEL TYPE LVC_FNAME,
        INHERITED   TYPE AQADH_TYPE_OF_ICON,
        EMITTER     TYPE AQADH_TYPE_OF_ICON,
        SIGN        TYPE TVARV_SIGN,
        OPTI        TYPE TVARV_OPTI,
        OPTION_ICON TYPE AQADH_TYPE_OF_ICON,
        LOW         TYPE AQADH_RANGE_VALUE,
        HIGH        TYPE AQADH_RANGE_VALUE,
        MORE_ICON   TYPE AQADH_TYPE_OF_ICON,
        RANGE       TYPE AQADH_T_RANGES,
        NAME        TYPE REPTEXT,
        TRANSMITTER TYPE REF TO LCL_DATA_TRANSMITTER,
        RECEIVER    TYPE REF TO LCL_DATA_RECEIVER,
        CHANGE(1),
      END OF SELECTION_DISPLAY_S.

    DATA: MO_VIEWER  TYPE REF TO LCL_TABLE_VIEWER,
          MO_SEL_ALV TYPE REF TO CL_GUI_ALV_GRID,
          MT_FCAT    TYPE LVC_T_FCAT,
          MO_SEL_TAB TYPE TABLE OF SELECTION_DISPLAY_S.

    EVENTS: SELECTION_DONE.

    METHODS:
      CONSTRUCTOR IMPORTING IO_VIEWER TYPE REF TO LCL_TABLE_VIEWER IO_CONTAINER TYPE REF TO CL_GUI_CONTAINER,
      RAISE_SELECTION_DONE,
      UPDATE_SEL_TAB,
      UPDATE_SEL_ROW CHANGING C_SEL_ROW TYPE SELECTION_DISPLAY_S.

  PRIVATE SECTION.

    METHODS:
      INIT_FCAT IMPORTING I_DD_HANDLE TYPE I,
      HANDLE_SEL_TOOLBAR FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
        IMPORTING E_OBJECT E_INTERACTIVE,
      ON_F4 FOR EVENT ONF4 OF CL_GUI_ALV_GRID
        IMPORTING E_FIELDNAME
                    ES_ROW_NO
                    ER_EVENT_DATA,
      ON_GRID_BUTTON_CLICK FOR EVENT BUTTON_CLICK OF CL_GUI_ALV_GRID
        IMPORTING
            ES_COL_ID
            ES_ROW_NO,
      ON_DATA_CHANGED FOR EVENT
                    DATA_CHANGED OF CL_GUI_ALV_GRID
        IMPORTING E_ONF4
                    E_ONF4_BEFORE
                    ER_DATA_CHANGED
                    SENDER,
      ON_DATA_CHANGED_FINISHED FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID
        IMPORTING E_MODIFIED ET_GOOD_CELLS,
      HANDLE_USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
        IMPORTING E_UCOMM,
      HANDLE_CONTEXT_MENU_REQUEST FOR EVENT CONTEXT_MENU_REQUEST
            OF CL_GUI_ALV_GRID
        IMPORTING
            E_OBJECT
            SENDER.
ENDCLASS.                    "lcl_sel_opt DEFINITION

CLASS LCL_TABLE_VIEWER DEFINITION.

  PUBLIC SECTION.

    TYPES: BEGIN OF T_COLUMN_EMITTER,
             COLUMN  TYPE LVC_FNAME,
             EMITTER TYPE REF TO LCL_DATA_TRANSMITTER,
           END OF T_COLUMN_EMITTER.

    DATA: M_LANG             TYPE DDLANGUAGE,
          M_TABNAME          TYPE TABNAME,
          M_COUNT            TYPE I,
          MO_ALV             TYPE REF TO CL_GUI_ALV_GRID,
          MO_SEL             TYPE REF TO LCL_SEL_OPT,
          MO_BOX             TYPE REF TO CL_GUI_DIALOGBOX_CONTAINER,
          MR_TABLE           TYPE REF TO DATA,
          MO_SPLITTER        TYPE REF TO CL_GUI_SPLITTER_CONTAINER,
          MO_SEL_PARENT      TYPE REF TO CL_GUI_CONTAINER,
          MO_ALV_PARENT      TYPE REF TO CL_GUI_CONTAINER,
          MO_ALV_CATALOG     TYPE LVC_T_FCAT,
          MO_COLUMN_EMITTERS TYPE TABLE OF T_COLUMN_EMITTER,
          MO_SEL_WIDTH       TYPE I,
          M_VISIBLE.

    METHODS:
      CONSTRUCTOR IMPORTING I_TNAME TYPE TABNAME,
      GET_WHERE RETURNING VALUE(C_WHERE) TYPE STRING,
      REFRESH_TABLE FOR EVENT SELECTION_DONE OF LCL_SEL_OPT.

  PRIVATE SECTION.
    METHODS:
      CREATE_POPUP,
      CREATE_ALV,
      CREATE_SEL_ALV,
      SET_HEADER,
      HANDLE_TAB_TOOLBAR FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
        IMPORTING E_OBJECT E_INTERACTIVE,

      HANDLE_MENU_BUTTON
                    FOR EVENT MENU_BUTTON OF CL_GUI_ALV_GRID
        IMPORTING E_OBJECT E_UCOMM,

      HANDLE_USER_COMMAND
                    FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
        IMPORTING E_UCOMM.
ENDCLASS.                    "lcl_table_viewer DEFINITION

CLASS LCL_DATA_RECEIVER IMPLEMENTATION.

  METHOD CONSTRUCTOR.
    LO_SEL_TO = IO_SEL_TO.
    M_FROM_FIELD =  I_FROM_FIELD.
    M_TO_FIELD =  I_TO_FIELD.

    LO_TAB_FROM = IO_TAB_FROM.
    MO_TRANSMITTER = IO_TRANSMITTER.

    IF MO_TRANSMITTER IS NOT INITIAL.
      IF LO_TAB_FROM IS INITIAL.
        SET HANDLER ME->UPDATE FOR IO_TRANSMITTER.
      ELSE.
        SET HANDLER ME->UPDATE_COL FOR IO_TRANSMITTER.
      ENDIF.
    ELSE.
      SET HANDLER ME->UPDATE FOR ALL INSTANCES.
    ENDIF.
  ENDMETHOD.                    "constructor

  METHOD SHUT_DOWN.
    IF MO_TRANSMITTER IS NOT INITIAL.
      SET HANDLER ME->UPDATE FOR MO_TRANSMITTER  ACTIVATION SPACE.
    ELSE.
      SET HANDLER ME->UPDATE FOR ALL INSTANCES  ACTIVATION SPACE.
    ENDIF.
    CLEAR LO_SEL_TO.
  ENDMETHOD.                    "shut_down

  METHOD ON_GRID_BUTTON_CLICK.
    FIELD-SYMBOLS: <F_TAB>   TYPE STANDARD TABLE,
                   <F_FIELD> TYPE ANY.
    CHECK M_FROM_FIELD = ES_COL_ID-FIELDNAME.

    ASSIGN LO_TAB_FROM->MR_TABLE->* TO <F_TAB>.
    FIELD-SYMBOLS <TAB> TYPE ANY.
    READ TABLE <F_TAB> INDEX ES_ROW_NO-ROW_ID ASSIGNING <TAB>.
    ASSIGN COMPONENT ES_COL_ID-FIELDNAME OF STRUCTURE <TAB> TO  <F_FIELD>.

    CHECK LO_SEL_TO IS NOT INITIAL.
    FIELD-SYMBOLS <TO> LIKE LINE OF LO_SEL_TO->MO_SEL_TAB.
    READ TABLE LO_SEL_TO->MO_SEL_TAB ASSIGNING <TO> WITH KEY FIELD_LABEL = M_TO_FIELD.
    CLEAR: <TO>-HIGH, <TO>-OPTI, <TO>-SIGN, <TO>-RANGE.
    <TO>-LOW = <F_FIELD>.
    LO_SEL_TO->UPDATE_SEL_ROW( CHANGING C_SEL_ROW = <TO> ).

    IF <TO>-TRANSMITTER IS BOUND.
      DATA: LS_ROW TYPE T_SEL_ROW.
      MOVE-CORRESPONDING <TO> TO LS_ROW.
      <TO>-TRANSMITTER->EMIT( EXPORTING E_ROW = LS_ROW ).
    ENDIF.

    LCL_ALV_COMMON=>REFRESH( LO_SEL_TO->MO_SEL_ALV ).
    LO_SEL_TO->RAISE_SELECTION_DONE( ).
  ENDMETHOD.                    "on_grid_button_click

  METHOD  UPDATE.
    DATA: L_UPDATED.
    FIELD-SYMBOLS <TO> LIKE LINE OF LO_SEL_TO->MO_SEL_TAB.
    READ TABLE LO_SEL_TO->MO_SEL_TAB ASSIGNING <TO> WITH KEY FIELD_LABEL = M_TO_FIELD.
    IF <TO>-RANGE[] = E_ROW-RANGE[].
      L_UPDATED = 'X'."so as not to have an infinite event loop
    ENDIF.
    MOVE-CORRESPONDING E_ROW TO <TO>.

    IF <TO>-TRANSMITTER IS BOUND AND L_UPDATED IS INITIAL.
      <TO>-TRANSMITTER->EMIT( EXPORTING E_ROW = E_ROW ).
    ENDIF.

    LCL_ALV_COMMON=>REFRESH( LO_SEL_TO->MO_SEL_ALV ).
    LO_SEL_TO->RAISE_SELECTION_DONE( ).
  ENDMETHOD.                    "update

  METHOD UPDATE_COL.

    DATA: LT_SEL_ROW TYPE T_SEL_ROW.
    FIELD-SYMBOLS: <TAB>   TYPE STANDARD TABLE,
                   <FIELD> TYPE ANY.

    CHECK LO_SEL_TO IS NOT INITIAL.
    FIELD-SYMBOLS <TO> LIKE LINE OF LO_SEL_TO->MO_SEL_TAB.
    READ TABLE LO_SEL_TO->MO_SEL_TAB ASSIGNING <TO> WITH KEY FIELD_LABEL = M_TO_FIELD.
    CLEAR: <TO>-SIGN, <TO>-OPTI, <TO>-LOW, <TO>-HIGH, <TO>-RANGE.
    ASSIGN LO_TAB_FROM->MR_TABLE->* TO <TAB>.

    FIELD-SYMBOLS <ROW> TYPE ANY.
    LOOP AT <TAB> ASSIGNING <ROW>.
      ASSIGN COMPONENT E_COLUMN OF STRUCTURE <ROW> TO <FIELD>.
      READ TABLE <TO>-RANGE WITH KEY LOW = <FIELD>  TRANSPORTING NO FIELDS.
      IF SY-SUBRC NE 0.
        DATA LS_RANGE TYPE AQADH_S_RANGES.
        LS_RANGE-SIGN = 'I'.
        LS_RANGE-OPTI = 'EQ'.
        LS_RANGE-LOW = <FIELD>.
        APPEND LS_RANGE TO <TO>-RANGE.
      ENDIF.
    ENDLOOP.

    IF SY-SUBRC NE 0." empty column
      LS_RANGE-SIGN = 'I'.
      LS_RANGE-OPTI = 'EQ'.
      LS_RANGE-LOW = ''.
      APPEND LS_RANGE TO <TO>-RANGE.
    ENDIF.

    FIELD-SYMBOLS <SEL> TYPE AQADH_S_RANGES.
    LOOP AT <TO>-RANGE ASSIGNING <SEL>.
      <TO>-LOW = <SEL>-LOW.
      LO_SEL_TO->UPDATE_SEL_ROW( CHANGING C_SEL_ROW = <TO> ).
      EXIT.
    ENDLOOP.

    MOVE-CORRESPONDING <TO> TO LT_SEL_ROW.

    IF <TO>-TRANSMITTER IS BOUND. " AND l_updated IS INITIAL.
      <TO>-TRANSMITTER->EMIT( EXPORTING E_ROW = LT_SEL_ROW ).
    ENDIF.

    LCL_ALV_COMMON=>REFRESH( LO_SEL_TO->MO_SEL_ALV ).
    LO_SEL_TO->RAISE_SELECTION_DONE( ).

  ENDMETHOD.                    "update_col
ENDCLASS.                    "lcl_data_receiver IMPLEMENTATION

CLASS LCL_BOX_HANDLER DEFINITION."for memory clearing
  PUBLIC SECTION.
    METHODS: ON_BOX_CLOSE FOR EVENT CLOSE OF CL_GUI_DIALOGBOX_CONTAINER IMPORTING SENDER.
ENDCLASS.                    "lcl_box_handler DEFINITION

CLASS LCL_BOX_HANDLER IMPLEMENTATION.

  METHOD ON_BOX_CLOSE.

    DATA: LV_TABIX LIKE SY-TABIX.
    SENDER->FREE( ).

    "Free Memory
    FIELD-SYMBOLS <OBJ> TYPE LCL_APPL=>T_OBJ.
    LOOP AT LCL_APPL=>MT_OBJ ASSIGNING <OBJ>.
      IF <OBJ>-ALV_VIEWER->MO_BOX = SENDER.
        LV_TABIX = SY-TABIX.
        EXIT.
      ENDIF.
    ENDLOOP.
    IF SY-SUBRC = 0.
      FREE <OBJ>-ALV_VIEWER->MR_TABLE.
      FREE <OBJ>-ALV_VIEWER->MO_ALV.

      "shutdown receivers.
      IF <OBJ>-ALV_VIEWER->MO_SEL IS NOT INITIAL.
        DATA L_SEL TYPE LCL_SEL_OPT=>SELECTION_DISPLAY_S.
        LOOP AT <OBJ>-ALV_VIEWER->MO_SEL->MO_SEL_TAB INTO L_SEL.
          IF L_SEL-RECEIVER IS BOUND.
            L_SEL-RECEIVER->SHUT_DOWN( ).
          ENDIF.
        ENDLOOP.
      ENDIF.
      FREE <OBJ>-ALV_VIEWER.

      DELETE LCL_APPL=>MT_OBJ INDEX LV_TABIX.
    ENDIF.
  ENDMETHOD.                    "ON_BOX_CLOSE
ENDCLASS.               "lcl_box_handler

CLASS LCL_TABLE_VIEWER IMPLEMENTATION.

  METHOD CONSTRUCTOR.
    M_LANG = SY-LANGU.
    MO_SEL_WIDTH = 0.
    M_TABNAME = I_TNAME.
    CREATE_POPUP( ).
    LCL_CREATE_DATA=>CREATE_TABLE( EXPORTING I_TNAME = M_TABNAME CHANGING C_TABLE = MR_TABLE ).
    CREATE_ALV( ).
  ENDMETHOD.                    "constructor

  METHOD CREATE_POPUP.
    DATA: L_TOP  TYPE I,
          L_LEFT TYPE I.

    DATA L_LINES TYPE I.
    L_LINES = LINES( LCL_APPL=>MT_OBJ ) - 1.
    L_TOP  = 20 + 30 * ( L_LINES DIV 5 ) +  ( L_LINES MOD 5 ) * 50.
    L_LEFT = 350 + 300 * ( L_LINES DIV 5 )  +  ( L_LINES MOD 5 ) * 50.

    CREATE OBJECT MO_BOX
      EXPORTING
        WIDTH                       = '800'
        HEIGHT                      = '150'
        TOP                         = L_TOP
        LEFT                        = L_LEFT
        CAPTION                     = M_TABNAME
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        EVENT_ALREADY_REGISTERED    = 6
        ERROR_REGIST_EVENT          = 7
        OTHERS                      = 8.
    IF SY-SUBRC <> 0.
      RETURN.
    ENDIF.

    CREATE OBJECT MO_SPLITTER
      EXPORTING
        PARENT  = MO_BOX
        ROWS    = 1
        COLUMNS = 2
      EXCEPTIONS
        OTHERS  = 1.

    MO_SPLITTER->SET_COLUMN_MODE(  MODE = MO_SPLITTER->MODE_ABSOLUTE ).
    MO_SPLITTER->SET_COLUMN_WIDTH( ID = 1 WIDTH = MO_SEL_WIDTH ).

    CALL METHOD:
     MO_SPLITTER->GET_CONTAINER(  EXPORTING
        ROW       = 1
        COLUMN    = 1
      RECEIVING
        CONTAINER = MO_SEL_PARENT ),

      MO_SPLITTER->GET_CONTAINER
       EXPORTING
        ROW       = 1
        COLUMN    = 2
       RECEIVING
        CONTAINER = MO_ALV_PARENT.

    IF LCL_APPL=>M_CTRL_BOX_HANDLER IS INITIAL.
      CREATE OBJECT LCL_APPL=>M_CTRL_BOX_HANDLER.
    ENDIF.
    SET HANDLER LCL_APPL=>M_CTRL_BOX_HANDLER->ON_BOX_CLOSE FOR MO_BOX.
  ENDMETHOD.                    "create_popup

  METHOD CREATE_ALV.

    DATA: LS_LAYOUT  TYPE LVC_S_LAYO,
          EFFECT     TYPE I,
          HANDLE_ALV TYPE I.
    FIELD-SYMBOLS: <F_TAB>   TYPE ANY TABLE.

    CREATE OBJECT MO_ALV
      EXPORTING
        I_PARENT = MO_ALV_PARENT.
    ASSIGN MR_TABLE->* TO <F_TAB>.
    LCL_SQL=>READ_TABLE( EXPORTING I_TABNAME = M_TABNAME I_WHERE = GET_WHERE( ) I_ROW_COUNT = 100
                         CHANGING CR_TAB =  MR_TABLE C_COUNT = M_COUNT ).

    SET_HEADER( ).
    LS_LAYOUT-ZEBRA = 'X'.
    LS_LAYOUT-COL_OPT = 'X'.
    LS_LAYOUT-CWIDTH_OPT = 'X'.
    LS_LAYOUT-SEL_MODE = 'D'.

    CREATE OBJECT LCL_APPL=>C_DRAGDROPALV.

    EFFECT = CL_DRAGDROP=>MOVE + CL_DRAGDROP=>COPY.

    CALL METHOD LCL_APPL=>C_DRAGDROPALV->ADD
      EXPORTING
        FLAVOR     = 'Line'
        DRAGSRC    = 'X'
        DROPTARGET = 'X'
        EFFECT     = EFFECT.

    CALL METHOD LCL_APPL=>C_DRAGDROPALV->GET_HANDLE
      IMPORTING
        HANDLE = HANDLE_ALV.

    LS_LAYOUT-S_DRAGDROP-GRID_DDID = HANDLE_ALV.
    CALL METHOD MO_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        I_SAVE           = 'X'
        I_DEFAULT        = 'X'
        I_STRUCTURE_NAME = M_TABNAME
        IS_LAYOUT        = LS_LAYOUT
      CHANGING
        IT_OUTTAB        = <F_TAB>.

    MO_ALV->GET_FRONTEND_FIELDCATALOG( IMPORTING ET_FIELDCATALOG = MO_ALV_CATALOG ).

    FIELD-SYMBOLS <CAT> TYPE LVC_S_FCAT.
    LOOP AT MO_ALV_CATALOG ASSIGNING <CAT> WHERE SCRTEXT_L IS INITIAL.
      LCL_ALV_COMMON=>TRANSLATE_FIELD(  CHANGING C_FLD = <CAT> ).
    ENDLOOP.

    MO_ALV->SET_FRONTEND_FIELDCATALOG( EXPORTING  IT_FIELDCATALOG = MO_ALV_CATALOG ).
    SET HANDLER ME->HANDLE_USER_COMMAND
                ME->HANDLE_MENU_BUTTON
                ME->HANDLE_TAB_TOOLBAR
                LCL_DRAGDROP=>DRAG FOR MO_ALV.

    ME->HANDLE_USER_COMMAND( EXPORTING E_UCOMM = 'HIDE' ).
    MO_ALV->SET_TOOLBAR_INTERACTIVE( ).
  ENDMETHOD.                    "create_alv

  METHOD CREATE_SEL_ALV.
    IF MO_SEL IS INITIAL.
      CREATE OBJECT MO_SEL
        EXPORTING
          IO_VIEWER    = ME
          IO_CONTAINER = MO_SEL_PARENT.
      SET HANDLER REFRESH_TABLE FOR MO_SEL.
    ELSE.
      MO_SEL->UPDATE_SEL_TAB( ).
    ENDIF.
  ENDMETHOD.                    "create_sel_alv

  METHOD SET_HEADER.
    DATA: LV_TEXT       TYPE AS4TEXT,
          LV_HEADER(80) TYPE C.

    SELECT SINGLE DDTEXT INTO LV_TEXT
      FROM DD02T
      WHERE TABNAME = M_TABNAME
        AND DDLANGUAGE = M_LANG.

    LV_HEADER = |{ M_TABNAME } - { LV_TEXT } ({ M_COUNT })|.
    MO_BOX->SET_CAPTION( LV_HEADER ).
  ENDMETHOD.                    "set_header

  METHOD HANDLE_TAB_TOOLBAR.
    IF M_VISIBLE IS INITIAL.
      DATA: LT_TOOLBAR TYPE TTB_BUTTON,
            LS_TOOLBAR TYPE STB_BUTTON.
      LS_TOOLBAR-FUNCTION = 'SEL_ON'.
      LS_TOOLBAR-ICON = ICON_ARROW_LEFT.
      LS_TOOLBAR-QUICKINFO = 'Select-Options'.
      LS_TOOLBAR-BUTN_TYPE = 0.
      APPEND LS_TOOLBAR TO LT_TOOLBAR.

      CLEAR LS_TOOLBAR.
      LS_TOOLBAR-BUTN_TYPE = 3.
      APPEND LS_TOOLBAR TO LT_TOOLBAR.
    ENDIF.
    LS_TOOLBAR-FUNCTION = 'LANGUAGE'.
    LS_TOOLBAR-ICON = ICON_FOREIGN_TRADE.
    LS_TOOLBAR-QUICKINFO = 'Languages'.
    LS_TOOLBAR-BUTN_TYPE = 2.
    APPEND LS_TOOLBAR TO LT_TOOLBAR.

    LS_TOOLBAR-FUNCTION = 'OPTIONS'.
    LS_TOOLBAR-ICON  = ICON_LIST.
    LS_TOOLBAR-QUICKINFO = 'Empty columns options'.
    APPEND LS_TOOLBAR TO LT_TOOLBAR.

    LS_TOOLBAR-FUNCTION = 'TABLES'.
    LS_TOOLBAR-ICON  = ICON_NET_GRAPHIC.
    LS_TOOLBAR-QUICKINFO = 'Table links'.
    LS_TOOLBAR-BUTN_TYPE = 0.
    APPEND LS_TOOLBAR TO LT_TOOLBAR.

    CLEAR LS_TOOLBAR.
    LS_TOOLBAR-BUTN_TYPE = 3.
    APPEND LS_TOOLBAR TO LT_TOOLBAR.

    APPEND LINES OF E_OBJECT->MT_TOOLBAR TO LT_TOOLBAR.
    E_OBJECT->MT_TOOLBAR = LT_TOOLBAR.
  ENDMETHOD.                    "handle_tab_toolbar

  METHOD HANDLE_MENU_BUTTON.
    IF E_UCOMM = 'LANGUAGE'.
      CALL METHOD E_OBJECT->ADD_FUNCTION
        EXPORTING
          FCODE = 'TECH'
          TEXT  = 'Technical name'. "Teхническое имя
      DATA LS_LANG TYPE LCL_APPL=>T_LANG.
      LOOP AT LCL_APPL=>MT_LANG INTO LS_LANG.
        DATA:  LV_LANG TYPE UI_FUNC,
               LV_TEXT TYPE GUI_TEXT.

        CALL FUNCTION 'CONVERSION_EXIT_ISOLA_OUTPUT'
      EXPORTING
        INPUT            = LS_LANG-SPRAS
      IMPORTING
        OUTPUT           = LV_LANG
      EXCEPTIONS
        UNKNOWN_LANGUAGE = 1
        OTHERS           = 2.

        LV_TEXT = LS_LANG-SPTXT.
        CALL METHOD E_OBJECT->ADD_FUNCTION
          EXPORTING
            FCODE = LV_LANG
            TEXT  = LV_TEXT. .
      ENDLOOP.
    ELSEIF E_UCOMM = 'OPTIONS'.
      CALL METHOD E_OBJECT->ADD_FUNCTION
        EXPORTING
          FCODE = 'HIDE'
          TEXT  = 'Hide empty columns'. "Спрятать пустые столбцы
      CALL METHOD E_OBJECT->ADD_FUNCTION
        EXPORTING
          FCODE = 'SHOW'
          TEXT  = 'Show empty columns'. "Отобразить пустые столбцы
    ENDIF.
  ENDMETHOD.                    "handle_menu_button

  METHOD HANDLE_USER_COMMAND.
    DATA:
      IT_FIELDS    TYPE LVC_T_FCAT,
      LV_CLAUSE    TYPE STRING,
      LV_SEL_WIDTH TYPE I.

    FIELD-SYMBOLS: <FIELD>  LIKE LINE OF IT_FIELDS,
                   <F_TAB>  TYPE ANY TABLE,
                   <F_LINE> TYPE ANY.

    MO_ALV->GET_FRONTEND_FIELDCATALOG( IMPORTING ET_FIELDCATALOG = IT_FIELDS[] ).
    ASSIGN MR_TABLE->* TO <F_TAB>.
    IF E_UCOMM = 'SEL_ON' AND M_VISIBLE IS INITIAL.
      CREATE_SEL_ALV( ).
      M_VISIBLE = 'X'.
      IF MO_SEL_WIDTH = 0.
        LV_SEL_WIDTH = 500.
      ELSE.
        LV_SEL_WIDTH = MO_SEL_WIDTH.
      ENDIF.

      MO_SPLITTER->SET_COLUMN_WIDTH( EXPORTING
          ID    = 1
          WIDTH = LV_SEL_WIDTH ).

      MO_ALV->SET_TOOLBAR_INTERACTIVE( ).
      RETURN.
    ENDIF.

    LOOP AT IT_FIELDS ASSIGNING <FIELD>.
      CASE E_UCOMM.
        WHEN 'HIDE'. "hide select options
          LV_CLAUSE = |{ <FIELD>-FIELDNAME } IS NOT INITIAL|.
          LOOP AT <F_TAB> ASSIGNING <F_LINE>  WHERE (LV_CLAUSE).
            EXIT.
          ENDLOOP.

          IF SY-SUBRC NE 0.
            <FIELD>-NO_OUT = 'X'.
          ENDIF.

        WHEN 'SHOW'.
          <FIELD>-NO_OUT = ' '.
        WHEN 'TECH'. "technical field name
          <FIELD>-SCRTEXT_L = <FIELD>-SCRTEXT_M = <FIELD>-SCRTEXT_S =  <FIELD>-REPTEXT = <FIELD>-FIELDNAME.
        WHEN 'TABLES'.
          DATA: LT_OBJ TYPE SDG1_OBJ,
                LS_OBJ TYPE SDG1_OBJ1.
          LS_OBJ-OBJ_NAME = M_TABNAME.
          LS_OBJ-TYPE = 'TABL'.
          APPEND LS_OBJ TO LT_OBJ.
          CALL FUNCTION 'REPOSITORY_STRUCTURE_GRAPH'
            EXPORTING
              TYPE    = 'TABL'
            TABLES
              OBJECTS = LT_OBJ.
          SET TITLEBAR 'SDE'.
          RETURN.
        WHEN OTHERS. "header names translation
          READ TABLE LCL_APPL=>MT_LANG WITH KEY SPRAS = E_UCOMM TRANSPORTING NO FIELDS.
          IF SY-SUBRC = 0.
            LCL_ALV_COMMON=>TRANSLATE_FIELD( EXPORTING I_LANG = E_UCOMM CHANGING C_FLD = <FIELD> ).
            IF MO_SEL IS BOUND.
              FIELD-SYMBOLS <SEL> TYPE LCL_SEL_OPT=>SELECTION_DISPLAY_S.
              READ TABLE MO_SEL->MO_SEL_TAB ASSIGNING <SEL> WITH KEY FIELD_LABEL = <FIELD>-FIELDNAME.
              IF SY-SUBRC = 0.
                <SEL>-NAME = <FIELD>-SCRTEXT_L.
                IF <SEL>-NAME IS INITIAL.
                  <SEL>-NAME = <FIELD>-REPTEXT.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
      ENDCASE.
    ENDLOOP.

    READ TABLE LCL_APPL=>MT_LANG WITH KEY SPRAS = E_UCOMM TRANSPORTING NO FIELDS.
    IF SY-SUBRC = 0.
      M_LANG = E_UCOMM.
      SET_HEADER( ).
    ENDIF.

    CALL METHOD MO_ALV->SET_FRONTEND_FIELDCATALOG
      EXPORTING
        IT_FIELDCATALOG = IT_FIELDS[].
    LCL_ALV_COMMON=>REFRESH( MO_ALV ).
    IF MO_SEL IS BOUND.
      IF  E_UCOMM = 'HIDE' OR E_UCOMM = 'SHOW'.
        MO_SEL->UPDATE_SEL_TAB( ).
      ENDIF.
      LCL_ALV_COMMON=>REFRESH( MO_SEL->MO_SEL_ALV ).
    ENDIF.
  ENDMETHOD.                           "handle_user_command

  METHOD GET_WHERE."dynamic where clause

    DATA: LV_SENTENCE TYPE STRING,LV_OPT TYPE STRING,
          LV_NOT      TYPE STRING.

    IF  MO_SEL IS NOT INITIAL.
      DATA LS_TAB TYPE LCL_SEL_OPT=>SELECTION_DISPLAY_S.
      LOOP AT MO_SEL->MO_SEL_TAB INTO LS_TAB WHERE RANGE IS NOT INITIAL.
        CLEAR LV_OPT.
        FIELD-SYMBOLS <RANGE> TYPE AQADH_S_RANGES.
        LOOP AT LS_TAB-RANGE ASSIGNING <RANGE>.
          DATA L_FCAT TYPE LVC_S_FCAT.
          READ TABLE MO_ALV_CATALOG WITH KEY FIELDNAME = LS_TAB-FIELD_LABEL INTO L_FCAT TRANSPORTING DATATYPE.
          IF L_FCAT-DATATYPE = 'DATS' AND LS_TAB-SIGN IS NOT INITIAL.
            CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
              EXPORTING
                DATE_EXTERNAL            = <RANGE>-LOW
              IMPORTING
                DATE_INTERNAL            = <RANGE>-LOW
              EXCEPTIONS
                DATE_EXTERNAL_IS_INVALID = 1
                OTHERS                   = 2.

            CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
              EXPORTING
                DATE_EXTERNAL            = <RANGE>-HIGH
              IMPORTING
                DATE_INTERNAL            = <RANGE>-HIGH
              EXCEPTIONS
                DATE_EXTERNAL_IS_INVALID = 1
                OTHERS                   = 2.
          ENDIF.

          IF <RANGE>-OPTI = 'NP'.
            <RANGE>-OPTI = 'CP'.
            IF <RANGE>-SIGN = 'I'.
              <RANGE>-SIGN = 'E'.
            ELSE.
              <RANGE>-SIGN = 'I'.
            ENDIF.
          ENDIF.

          IF <RANGE>-SIGN = 'E'.
            LV_NOT = ' NOT'.
          ELSE.
            CLEAR LV_NOT.
          ENDIF.

          IF <RANGE>-SIGN = 'E'.
            CASE <RANGE>-OPTI.
              WHEN 'EQ'.
                <RANGE>-OPTI = 'NE'.
              WHEN 'NE'.
                <RANGE>-OPTI = 'EQ'.
              WHEN 'BT'.
                <RANGE>-OPTI = 'NB'.
              WHEN 'NB'.
                <RANGE>-OPTI = 'BT'.
            ENDCASE.
          ENDIF.

          IF <RANGE>-OPTI = 'BT' OR <RANGE>-OPTI = 'NB'.
            LV_SENTENCE = |{ LS_TAB-FIELD_LABEL }{ LV_NOT } BETWEEN '{ <RANGE>-LOW }' AND '{ <RANGE>-HIGH }'|.
          ELSEIF <RANGE>-OPTI = 'CP' OR <RANGE>-OPTI = 'NP' .
            REPLACE ALL OCCURRENCES OF '*' IN <RANGE>-LOW WITH '%'.
            REPLACE ALL OCCURRENCES OF '+' IN <RANGE>-LOW WITH '_'.
            LV_SENTENCE = |{ LS_TAB-FIELD_LABEL }{ LV_NOT } LIKE '{ <RANGE>-LOW }'|.
          ELSE.
            LV_SENTENCE = |{ LS_TAB-FIELD_LABEL } { <RANGE>-OPTI } '{ <RANGE>-LOW }'|.
          ENDIF.

          IF LV_OPT IS INITIAL.
            LV_OPT = |{ LV_SENTENCE }|.
          ELSE.
           IF ( <range>-opti = 'BT' OR <range>-opti = 'NB' ) AND <range>-sign = 'I'.
              lv_opt = |{ lv_opt } OR { lv_sentence }|.
            ELSE.
              lv_opt = |{ lv_opt } AND { lv_sentence }|.
            ENDIF.
          ENDIF.

          AT END OF SIGN.
            LV_OPT = |( { LV_OPT } ) |.
          ENDAT.
        ENDLOOP.

        IF C_WHERE IS INITIAL.
          C_WHERE = LV_OPT.
        ELSE.
          C_WHERE = |{ C_WHERE } AND { LV_OPT }| .
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.                    "get_where

  METHOD REFRESH_TABLE.
    DATA: LS_ROW TYPE T_SEL_ROW.
    LCL_SQL=>READ_TABLE( EXPORTING I_TABNAME = M_TABNAME I_WHERE = GET_WHERE( ) CHANGING CR_TAB =  MR_TABLE C_COUNT = M_COUNT ).
    SET_HEADER( ).
    FIELD-SYMBOLS <SEL> TYPE LCL_SEL_OPT=>SELECTION_DISPLAY_S.
    LOOP AT MO_SEL->MO_SEL_TAB  ASSIGNING <SEL>.
      IF <SEL>-TRANSMITTER IS NOT INITIAL.
        MOVE-CORRESPONDING <SEL> TO LS_ROW.
        <SEL>-TRANSMITTER->EMIT( E_ROW = LS_ROW ).
      ENDIF.
      CLEAR <SEL>-CHANGE.
    ENDLOOP.

    LCL_ALV_COMMON=>REFRESH( MO_ALV ).

    DATA L_EMIT TYPE T_COLUMN_EMITTER.
    LOOP AT MO_COLUMN_EMITTERS INTO L_EMIT.
      L_EMIT-EMITTER->EMIT_COL( L_EMIT-COLUMN ).
    ENDLOOP.
  ENDMETHOD.                    "refresh_table
ENDCLASS.                    "lcl_table_viewer IMPLEMENTATION

CLASS LCL_SEL_OPT IMPLEMENTATION.
  METHOD CONSTRUCTOR.
    DATA: LS_LAYOUT  TYPE LVC_S_LAYO,
          EFFECT     TYPE I,
          HANDLE_ALV TYPE I.

    MO_VIEWER = IO_VIEWER.
    CREATE OBJECT MO_SEL_ALV
      EXPORTING
        I_PARENT = IO_CONTAINER.
    UPDATE_SEL_TAB( ).
    CREATE OBJECT LCL_APPL=>C_DRAGDROPALV.
    EFFECT =  CL_DRAGDROP=>COPY. " + cl_dragdrop=>move.

    CALL METHOD LCL_APPL=>C_DRAGDROPALV->ADD
      EXPORTING
        FLAVOR     = 'Line'
        DRAGSRC    = 'X'
        DROPTARGET = 'X'
        EFFECT     = EFFECT.

    CALL METHOD LCL_APPL=>C_DRAGDROPALV->GET_HANDLE
      IMPORTING
        HANDLE = HANDLE_ALV.

    LS_LAYOUT-S_DRAGDROP-COL_DDID = HANDLE_ALV.
    INIT_FCAT( HANDLE_ALV ).

    LS_LAYOUT-CWIDTH_OPT = 'X'.
    "fields for F4 event handling
    DATA: GT_F4 TYPE LVC_T_F4,
          GS_F4 TYPE LVC_S_F4.
    GS_F4-REGISTER = 'X'.
    GS_F4-CHNGEAFTER = 'X'.
    GS_F4-FIELDNAME  = 'LOW'.
    INSERT GS_F4 INTO TABLE GT_F4.
    GS_F4-FIELDNAME  = 'HIGH'.
    INSERT GS_F4 INTO TABLE GT_F4.

    MO_SEL_ALV->REGISTER_F4_FOR_FIELDS( IT_F4 = GT_F4 ).
    MO_SEL_ALV->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

    SET HANDLER HANDLE_USER_COMMAND
                HANDLE_SEL_TOOLBAR
                LCL_DRAGDROP=>DRAG
                LCL_DRAGDROP=>DROP
                ON_DATA_CHANGED
                ON_DATA_CHANGED_FINISHED
                ON_GRID_BUTTON_CLICK
                HANDLE_CONTEXT_MENU_REQUEST FOR MO_SEL_ALV.
    SET HANDLER ON_F4 FOR mo_sel_alv.

    CALL METHOD MO_SEL_ALV->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        I_SAVE          = 'X'
        I_DEFAULT       = 'X'
        IS_LAYOUT       = LS_LAYOUT
      CHANGING
        IT_OUTTAB       = MO_SEL_TAB[]
        IT_FIELDCATALOG = MT_FCAT.

    MO_SEL_ALV->SET_TOOLBAR_INTERACTIVE( ).

  ENDMETHOD.                    "constructor

  METHOD INIT_FCAT.
    DATA LS_FCAT TYPE LVC_S_FCAT.
    LS_FCAT-FIELDNAME = 'IND'.
    LS_FCAT-COLTEXT = '№'.
    LS_FCAT-OUTPUTLEN = 3.
    APPEND LS_FCAT TO MT_FCAT.
    LS_FCAT-FIELDNAME = 'FIELD_LABEL'.
    LS_FCAT-COLTEXT = 'Label'.
    LS_FCAT-OUTPUTLEN = 30.
    LS_FCAT-DRAGDROPID = I_DD_HANDLE.
    LS_FCAT-EMPHASIZE = 'X'.
    APPEND LS_FCAT TO MT_FCAT.
    CLEAR LS_FCAT.
    LS_FCAT-FIELDNAME = 'SIGN'.
    LS_FCAT-COLTEXT = 'Sign'.
    LS_FCAT-TECH = 'X'.
    APPEND LS_FCAT TO MT_FCAT.
    LS_FCAT-FIELDNAME = 'OPTI'.
    LS_FCAT-COLTEXT = 'Option'.
    LS_FCAT-TECH = 'X'.
    APPEND LS_FCAT TO MT_FCAT.
    CLEAR LS_FCAT.
    LS_FCAT-FIELDNAME = 'OPTION_ICON'.
    LS_FCAT-COLTEXT = 'Option'.
    LS_FCAT-OUTPUTLEN = 4.
    LS_FCAT-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_BUTTON.
    APPEND LS_FCAT TO MT_FCAT.
    CLEAR LS_FCAT.
    LS_FCAT-FIELDNAME = 'LOW'.
    LS_FCAT-COLTEXT = 'From data'.
    LS_FCAT-EDIT = 'X'.
    LS_FCAT-LOWERCASE = 'X'.
    LS_FCAT-OUTPUTLEN = 45.
    LS_FCAT-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_F4.
    APPEND LS_FCAT TO MT_FCAT.
    LS_FCAT-FIELDNAME = 'HIGH'.
    LS_FCAT-COLTEXT = 'To data'.
    APPEND LS_FCAT TO MT_FCAT.
    CLEAR LS_FCAT.
    LS_FCAT-FIELDNAME = 'MORE_ICON'.
    LS_FCAT-COLTEXT = 'Range'.
    LS_FCAT-OUTPUTLEN = 4.
    LS_FCAT-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_BUTTON.
    APPEND LS_FCAT TO MT_FCAT.
    CLEAR LS_FCAT.
    LS_FCAT-FIELDNAME = 'RANGE'.
    LS_FCAT-TECH = 'X'.
    APPEND LS_FCAT TO MT_FCAT.
    CLEAR LS_FCAT.
    LS_FCAT-FIELDNAME = 'INHERITED'.
    LS_FCAT-COLTEXT = 'Inh.'.
    LS_FCAT-OUTPUTLEN = 4.
    LS_FCAT-ICON = 'X'.
    LS_FCAT-SELTEXT = 'Inherited'.
    APPEND LS_FCAT TO MT_FCAT.
    LS_FCAT-FIELDNAME = 'Emitter'.
    LS_FCAT-COLTEXT = 'Emit.'.
    LS_FCAT-SELTEXT = 'Emitter'.
    APPEND LS_FCAT TO MT_FCAT.
    CLEAR LS_FCAT.
    LS_FCAT-FIELDNAME = 'NAME'.
    LS_FCAT-COLTEXT = 'Field name'.
    LS_FCAT-OUTPUTLEN = 60.
    APPEND LS_FCAT TO MT_FCAT.
    CLEAR LS_FCAT.
    LS_FCAT-FIELDNAME = 'TRANSMITTER'.
    LS_FCAT-TECH = 'X'.
    APPEND LS_FCAT TO MT_FCAT.
    LS_FCAT-FIELDNAME = 'RECEIVER'.
    APPEND LS_FCAT TO MT_FCAT.
    LS_FCAT-FIELDNAME = 'CHANGE'.
    APPEND LS_FCAT TO MT_FCAT.

  ENDMETHOD.                    "init_fcat

  METHOD RAISE_SELECTION_DONE.
    RAISE EVENT SELECTION_DONE.
    DATA: LS_ROW TYPE T_SEL_ROW.
    FIELD-SYMBOLS <SEL> TYPE SELECTION_DISPLAY_S.
    LOOP AT MO_SEL_TAB  ASSIGNING <SEL>." WHERE change IS NOT INITIAL.
      IF <SEL>-TRANSMITTER IS NOT INITIAL.
        MOVE-CORRESPONDING <SEL> TO LS_ROW.
        <SEL>-TRANSMITTER->EMIT( E_ROW = LS_ROW ).
      ENDIF.
      CLEAR <SEL>-CHANGE.
    ENDLOOP.
  ENDMETHOD.                    "raise_selection_done

  METHOD UPDATE_SEL_TAB.
    IF MO_SEL_TAB[] IS NOT INITIAL.
      DATA LT_COPY TYPE TABLE OF SELECTION_DISPLAY_S.
      LT_COPY = MO_SEL_TAB.
    ENDIF.
    CLEAR MO_SEL_TAB[].
    MO_VIEWER->MO_ALV->GET_FRONTEND_FIELDCATALOG( IMPORTING ET_FIELDCATALOG = MO_VIEWER->MO_ALV_CATALOG ).
    DATA L_CATALOG TYPE LVC_S_FCAT.
    LOOP AT MO_VIEWER->MO_ALV_CATALOG INTO L_CATALOG.
      DATA LV_IND LIKE SY-TABIX.
      LV_IND = SY-TABIX.
      CHECK L_CATALOG-NO_OUT IS INITIAL.
      FIELD-SYMBOLS <SEL_TAB> TYPE SELECTION_DISPLAY_S.
      APPEND INITIAL LINE TO MO_SEL_TAB ASSIGNING <SEL_TAB>.
      DATA LS_COPY TYPE SELECTION_DISPLAY_S.
      READ TABLE LT_COPY INTO LS_COPY WITH KEY FIELD_LABEL = L_CATALOG-FIELDNAME.
      IF SY-SUBRC = 0.
        MOVE-CORRESPONDING LS_COPY TO <SEL_TAB>.
      ELSE.
        <SEL_TAB>-OPTION_ICON = ICON_LED_INACTIVE.
        <SEL_TAB>-MORE_ICON = ICON_ENTER_MORE.
      ENDIF.
      <SEL_TAB>-IND = LV_IND.
      <SEL_TAB>-FIELD_LABEL = L_CATALOG-FIELDNAME.
      <SEL_TAB>-NAME = L_CATALOG-SCRTEXT_L.
    ENDLOOP.
  ENDMETHOD.                    "update_sel_tab
  METHOD HANDLE_SEL_TOOLBAR.
    DATA: LS_TOOLBAR TYPE STB_BUTTON.

    CLEAR E_OBJECT->MT_TOOLBAR[].
    LS_TOOLBAR-FUNCTION = 'SEL_OFF'.
    LS_TOOLBAR-ICON = ICON_ARROW_RIGHT.
    LS_TOOLBAR-QUICKINFO = 'Hide'.
    LS_TOOLBAR-BUTN_TYPE = 0.
    LS_TOOLBAR-DISABLED = ''.
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR[].
    LS_TOOLBAR-FUNCTION = 'SEL_CLEAR'.
    LS_TOOLBAR-ICON = ICON_DELETE_ROW.
    LS_TOOLBAR-QUICKINFO = 'Clear Select-Options'.
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR[].
  ENDMETHOD.                    "handle_sel_toolbar

  METHOD UPDATE_SEL_ROW. "select patterns rules
    IF C_SEL_ROW-HIGH IS INITIAL AND C_SEL_ROW-OPTI = 'BT'.
      CLEAR C_SEL_ROW-OPTI.
    ENDIF.

    IF C_SEL_ROW-LOW IS NOT INITIAL AND C_SEL_ROW-OPTI IS INITIAL.
      C_SEL_ROW-SIGN = 'I'.
      C_SEL_ROW-OPTI = 'EQ'.
      C_SEL_ROW-CHANGE = 'X'.
    ENDIF.

    IF C_SEL_ROW-HIGH IS NOT INITIAL AND C_SEL_ROW-OPTI NE 'NB' .
      C_SEL_ROW-OPTI = 'BT'.
      C_SEL_ROW-CHANGE = 'X'.
    ENDIF.

    IF C_SEL_ROW-SIGN IS INITIAL AND C_SEL_ROW-OPTI IS INITIAL.
      CLEAR: C_SEL_ROW-LOW, C_SEL_ROW-LOW.
      C_SEL_ROW-CHANGE = 'X'.
    ENDIF.

    IF C_SEL_ROW-LOW CA  '*%+&'.
      C_SEL_ROW-SIGN = 'I'.
      C_SEL_ROW-OPTI = 'CP'.
      C_SEL_ROW-CHANGE = 'X'.
    ENDIF.

    IF C_SEL_ROW-OPTI IS NOT INITIAL AND C_SEL_ROW-SIGN IS INITIAL.
      C_SEL_ROW-SIGN = 'I'.
      C_SEL_ROW-CHANGE = 'X'.
    ENDIF.

    DATA L_ICONS TYPE LCL_APPL=>SIGN_OPTION_ICON_S.
    READ TABLE LCL_APPL=>M_OPTION_ICONS WITH KEY SIGN = C_SEL_ROW-SIGN OPTION = C_SEL_ROW-OPTI INTO L_ICONS.
    IF SY-SUBRC = 0.
      C_SEL_ROW-OPTION_ICON = L_ICONS-ICON_NAME.
    ENDIF.

    IF C_SEL_ROW-SIGN IS NOT INITIAL.
      FIELD-SYMBOLS <RANGE> TYPE AQADH_S_RANGES.
      READ TABLE C_SEL_ROW-RANGE ASSIGNING <RANGE> INDEX 1.
      IF SY-SUBRC NE 0.
        APPEND INITIAL LINE TO C_SEL_ROW-RANGE ASSIGNING <RANGE>.
      ENDIF.
      MOVE-CORRESPONDING C_SEL_ROW TO <RANGE>.
      IF C_SEL_ROW-OPTI NE 'BT' AND C_SEL_ROW-OPTI NE 'NB' .
        CLEAR C_SEL_ROW-HIGH.
      ENDIF.
    ENDIF.
    IF C_SEL_ROW-RANGE IS INITIAL.
      C_SEL_ROW-MORE_ICON = ICON_ENTER_MORE.
    ELSE.
      C_SEL_ROW-MORE_ICON = ICON_DISPLAY_MORE.
    ENDIF.
    IF C_SEL_ROW-RECEIVER IS BOUND AND C_SEL_ROW-INHERITED IS INITIAL.
      C_SEL_ROW-INHERITED = ICON_BUSINAV_VALUE_CHAIN.
    ENDIF.
  ENDMETHOD.                    "update_sel_row

  METHOD ON_F4.
    DATA: RETURN_TAB  TYPE STANDARD TABLE OF DDSHRETVAL,
          LV_RETFIELD TYPE DYNFNAM.

    FIELD-SYMBOLS: <ITAB> TYPE LVC_T_MODI.
    DATA: L_FNAME TYPE FIELDNAME,
          LS_SEL_TAB TYPE SELECTION_DISPLAY_S.
    READ TABLE MO_SEL_TAB INTO LS_SEL_TAB INDEX ES_ROW_NO-ROW_ID TRANSPORTING FIELD_LABEL.
    IF SY-SUBRC = 0.
      L_FNAME = LS_SEL_TAB-FIELD_LABEL.
    ENDIF.
    CALL FUNCTION 'F4IF_FIELD_VALUE_REQUEST'
      EXPORTING
        TABNAME           = MO_VIEWER->M_TABNAME "todo: change PAXXXX for PXXXX
        FIELDNAME         = L_FNAME
      TABLES
        RETURN_TAB        = RETURN_TAB
                                            "todo: callback for  f4 dependent fields
      EXCEPTIONS
        FIELD_NOT_FOUND   = 1
        NO_HELP_FOR_FIELD = 2
        INCONSISTENT_HELP = 3
        NO_VALUES_FOUND   = 4
        OTHERS            = 5.

    LV_RETFIELD = |{ MO_VIEWER->M_TABNAME }-{ L_FNAME }| .
    IF SY-SUBRC = 0.
      FIELD-SYMBOLS <RET> TYPE DDSHRETVAL.
      READ TABLE RETURN_TAB ASSIGNING <RET> WITH KEY RETFIELD = LV_RETFIELD.
      IF SY-SUBRC = 0.
        ASSIGN ER_EVENT_DATA->M_DATA->* TO <ITAB>.
        DATA L_MODI TYPE LVC_S_MODI.
        L_MODI-ROW_ID = ES_ROW_NO-ROW_ID.
        L_MODI-FIELDNAME = E_FIELDNAME.
        L_MODI-VALUE = <RET>-FIELDVAL.
        APPEND L_MODI TO <ITAB>.
        ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    "on_f4

  METHOD ON_GRID_BUTTON_CLICK.
    DATA:
      L_TABFIELD TYPE RSTABFIELD,
      LS_OPT     TYPE RSOPTIONS VALUE 'XXXXXXXXXX',
      LV_SIGN    TYPE RALDB_SIGN,
      LV_OPTION  TYPE RALDB_OPTI.

    FIELD-SYMBOLS <TAB> TYPE SELECTION_DISPLAY_S.
    READ TABLE MO_SEL_TAB INDEX ES_ROW_NO-ROW_ID ASSIGNING <TAB>.
    CASE ES_COL_ID.
      WHEN 'OPTION_ICON'. "edit select logical expression type
        CALL FUNCTION 'SELECT_OPTION_OPTIONS'
          EXPORTING
            SELCTEXT     = 'nnnn'
            OPTION_LIST  = LS_OPT
          IMPORTING
            SIGN         = LV_SIGN
            OPTION       = LV_OPTION
          EXCEPTIONS
            DELETE_LINE  = 1
            NOT_EXECUTED = 2
            ILLEGAL_SIGN = 3
            OTHERS       = 4.
        IF SY-SUBRC = 0.
          <TAB>-SIGN = LV_SIGN.
          <TAB>-OPTI = LV_OPTION.
          <TAB>-CHANGE = 'X'.
        ELSEIF SY-SUBRC = 1.
          CLEAR: <TAB>-LOW, <TAB>-HIGH,<TAB>-SIGN, <TAB>-OPTI, <TAB>-RANGE.
          <TAB>-CHANGE = 'X'.
        ENDIF.
      WHEN 'MORE_ICON'. "edit ranges
        L_TABFIELD-TABLENAME = MO_VIEWER->M_TABNAME.
        L_TABFIELD-FIELDNAME = <TAB>-FIELD_LABEL.

        CALL FUNCTION 'COMPLEX_SELECTIONS_DIALOG'
          EXPORTING
            TITLE             = 'title'
            TEXT              = 'text'
            TAB_AND_FIELD     = L_TABFIELD
          TABLES
            RANGE             = <TAB>-RANGE
          EXCEPTIONS
            NO_RANGE_TAB      = 1
            CANCELLED         = 2
            INTERNAL_ERROR    = 3
            INVALID_FIELDNAME = 4
            OTHERS            = 5.
        IF SY-SUBRC = 0.
          DATA L_RANGE TYPE AQADH_S_RANGES.
          READ TABLE <TAB>-RANGE INDEX 1 INTO L_RANGE.
          MOVE-CORRESPONDING L_RANGE TO <TAB>.
          IF <TAB>-OPTI NE 'BT'.
            CLEAR <TAB>-HIGH.
            <TAB>-CHANGE = 'X'.
          ENDIF.
        ENDIF.
    ENDCASE.

    UPDATE_SEL_ROW( CHANGING C_SEL_ROW = <TAB> ).
    LCL_ALV_COMMON=>REFRESH( MO_SEL_ALV ).
    RAISE EVENT SELECTION_DONE.
  ENDMETHOD.                    "on_grid_button_click

  METHOD ON_DATA_CHANGED.
    FIELD-SYMBOLS: <FIELD> TYPE ANY.
    FIELD-SYMBOLS <LS_CELLS> TYPE LVC_S_MODI.
    LOOP AT ER_DATA_CHANGED->MT_MOD_CELLS ASSIGNING <LS_CELLS>.
      FIELD-SYMBOLS <TAB> TYPE SELECTION_DISPLAY_S.
      READ TABLE MO_SEL_TAB INDEX <LS_CELLS>-ROW_ID ASSIGNING <TAB>.
      ASSIGN COMPONENT <LS_CELLS>-FIELDNAME OF STRUCTURE <TAB> TO <FIELD>.
      <FIELD> = <LS_CELLS>-VALUE.
    ENDLOOP.
    LOOP AT MO_SEL_TAB  ASSIGNING <TAB>.
      UPDATE_SEL_ROW( CHANGING C_SEL_ROW = <TAB> ).
    ENDLOOP.
    LCL_ALV_COMMON=>REFRESH( MO_SEL_ALV ).
  ENDMETHOD.                    "on_data_changed

  METHOD ON_DATA_CHANGED_FINISHED.
    CHECK E_MODIFIED IS NOT INITIAL.
    RAISE EVENT SELECTION_DONE.
  ENDMETHOD.                    "on_data_changed_finished

  METHOD HANDLE_CONTEXT_MENU_REQUEST.
    DATA: LT_FCODES    TYPE UI_FUNCATTR,
          LS_FCODE     TYPE UIATTENTRY,
          LS_FUNC      TYPE UI_FUNC,
          LT_FUNC      TYPE UI_FUNCTIONS,
          LT_SEL_CELLS TYPE LVC_T_CELL,
          LT_SEL_ROWS  TYPE LVC_T_ROW,
          L_INDEX      TYPE LVC_INDEX.

    MO_SEL_ALV->GET_SELECTED_CELLS( IMPORTING ET_CELL = LT_SEL_CELLS ).
    DATA L_CELLS TYPE LVC_S_CELL.
    READ TABLE LT_SEL_CELLS INTO L_CELLS INDEX 1 TRANSPORTING ROW_ID.
    IF SY-SUBRC = 0.
      L_INDEX = L_CELLS-ROW_ID.
    ELSE.
      MO_SEL_ALV->GET_SELECTED_ROWS( IMPORTING ET_INDEX_ROWS = LT_SEL_ROWS ).
      DATA L_ROW TYPE LVC_S_ROW.
      READ TABLE LT_SEL_ROWS INDEX 1 INTO L_ROW TRANSPORTING INDEX.
      IF SY-SUBRC = 0.
        L_INDEX = L_ROW-INDEX.
      ENDIF.
    ENDIF.

    IF L_INDEX IS NOT INITIAL.
      DATA L_SEL TYPE SELECTION_DISPLAY_S.
      READ TABLE MO_SEL_TAB INTO L_SEL INDEX L_INDEX.
    ENDIF.

    CALL METHOD E_OBJECT->GET_FUNCTIONS
      IMPORTING
        FCODES = LT_FCODES. "Inactivate all standard functions

    LOOP AT LT_FCODES INTO LS_FCODE WHERE FCODE NE '&OPTIMIZE'.
      LS_FUNC = LS_FCODE-FCODE.
      APPEND LS_FUNC TO LT_FUNC.
    ENDLOOP.
    E_OBJECT->HIDE_FUNCTIONS( LT_FUNC ).
    E_OBJECT->ADD_SEPARATOR( ).

    IF L_SEL-RANGE[]  IS NOT INITIAL OR L_INDEX IS INITIAL.
      CALL METHOD E_OBJECT->ADD_FUNCTION
        EXPORTING
          FCODE = 'SEL_CLEAR'
          TEXT  = 'Clear Select-Options'.
    ENDIF.

    IF L_SEL-RECEIVER IS NOT INITIAL OR L_INDEX IS INITIAL.
      CALL METHOD E_OBJECT->ADD_FUNCTION
        EXPORTING
          FCODE = 'DELR'
          TEXT  = 'Delete receiver'.
    ENDIF.
  ENDMETHOD.                    "handle_context_menu_request

  METHOD HANDLE_USER_COMMAND.
    DATA: LV_SEL_WIDTH TYPE I,
          LT_SEL_ROWS  TYPE LVC_T_ROW.

    IF E_UCOMM = 'SEL_OFF'. "Hide select-options alv
      MO_VIEWER->M_VISIBLE = ''.

      LV_SEL_WIDTH = 0.
      CALL METHOD MO_VIEWER->MO_SPLITTER->GET_COLUMN_WIDTH
        EXPORTING
          ID                = 1
        IMPORTING
          RESULT            = MO_VIEWER->MO_SEL_WIDTH
        EXCEPTIONS
          CNTL_ERROR        = 1
          CNTL_SYSTEM_ERROR = 2
          OTHERS            = 3.

      CALL METHOD MO_VIEWER->MO_SPLITTER->SET_COLUMN_WIDTH
        EXPORTING
          ID    = 1
          WIDTH = LV_SEL_WIDTH.
      MO_VIEWER->MO_ALV->SET_TOOLBAR_INTERACTIVE( ).
      RETURN.
    ENDIF.

    IF E_UCOMM = 'SEL_CLEAR' OR E_UCOMM = 'DELR'. "clear all selections
      MO_SEL_ALV->GET_SELECTED_ROWS( IMPORTING ET_INDEX_ROWS = LT_SEL_ROWS ).

      DATA L_ROW TYPE LVC_S_ROW.
      LOOP AT LT_SEL_ROWS INTO L_ROW.
        FIELD-SYMBOLS <SEL> TYPE SELECTION_DISPLAY_S.
        READ TABLE MO_SEL_TAB ASSIGNING <SEL> INDEX L_ROW-INDEX.
        IF E_UCOMM = 'SEL_CLEAR'.
          CLEAR : <SEL>-LOW, <SEL>-HIGH, <SEL>-SIGN, <SEL>-OPTI, <SEL>-RANGE.
        ELSEIF E_UCOMM = 'DELR'.
          IF <SEL>-RECEIVER IS NOT INITIAL.
            <SEL>-RECEIVER->SHUT_DOWN( ).
            FREE <SEL>-RECEIVER.
            CLEAR <SEL>-RECEIVER.
            CLEAR <SEL>-INHERITED.
          ENDIF.
        ENDIF.
        UPDATE_SEL_ROW( CHANGING C_SEL_ROW = <SEL> ).
      ENDLOOP.

      LCL_ALV_COMMON=>REFRESH( MO_SEL_ALV ).
      RAISE EVENT SELECTION_DONE.
    ENDIF.

    LCL_ALV_COMMON=>REFRESH( MO_VIEWER->MO_ALV ).
    RAISE EVENT SELECTION_DONE.
  ENDMETHOD.                           "handle_user_command
ENDCLASS.                    "lcl_sel_opt IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_appl IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS LCL_APPL IMPLEMENTATION.
  METHOD INIT_ICONS_TABLE.
    DATA: L_ICON TYPE SIGN_OPTION_ICON_S.
    L_ICON-SIGN = SPACE.
    L_ICON-OPTION = SPACE.
    L_ICON-ICON_NAME = ICON_LED_INACTIVE.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-SIGN = 'I'.
    L_ICON-OPTION = 'EQ'.
    L_ICON-ICON_NAME =  ICON_EQUAL_GREEN.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'NE'.
    L_ICON-ICON_NAME =  ICON_NOT_EQUAL_GREEN.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'LT'.
    L_ICON-ICON_NAME =  ICON_LESS_GREEN.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'LE'.
    L_ICON-ICON_NAME =  ICON_LESS_EQUAL_GREEN.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'GT'.
    L_ICON-ICON_NAME =  ICON_GREATER_GREEN.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'GE'.
    L_ICON-ICON_NAME =  ICON_GREATER_EQUAL_GREEN.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'CP'.
    L_ICON-ICON_NAME =  ICON_PATTERN_INCLUDE_GREEN.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'NP'.
    L_ICON-ICON_NAME =  ICON_PATTERN_EXCLUDE_GREEN.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'BT'.
    L_ICON-ICON_NAME =  ICON_INTERVAL_INCLUDE_GREEN.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'NB'.
    L_ICON-ICON_NAME =  ICON_INTERVAL_EXCLUDE_GREEN.
    APPEND L_ICON TO M_OPTION_ICONS.

    L_ICON-SIGN = 'E'.
    L_ICON-OPTION = 'EQ'.
    L_ICON-ICON_NAME =  ICON_EQUAL_RED.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'NE'.
    L_ICON-ICON_NAME =  ICON_NOT_EQUAL_RED.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'LT'.
    L_ICON-ICON_NAME =  ICON_LESS_RED.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'LE'.
    L_ICON-ICON_NAME =  ICON_LESS_EQUAL_RED.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'GT'.
    L_ICON-ICON_NAME =  ICON_GREATER_RED.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'GE'.
    L_ICON-ICON_NAME =  ICON_GREATER_EQUAL_RED.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'CP'.
    L_ICON-ICON_NAME =  ICON_PATTERN_INCLUDE_RED.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'NP'.
    L_ICON-ICON_NAME =  ICON_PATTERN_EXCLUDE_RED.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'BT'.
    L_ICON-ICON_NAME =  ICON_INTERVAL_INCLUDE_RED.
    APPEND L_ICON TO M_OPTION_ICONS.
    L_ICON-OPTION = 'NB'.
    L_ICON-ICON_NAME =  ICON_INTERVAL_EXCLUDE_RED.
    APPEND L_ICON TO M_OPTION_ICONS.

  ENDMETHOD.                    "init_icons_table

  METHOD INIT_LANG.
    SELECT C~SPRAS T~SPTXT INTO CORRESPONDING FIELDS OF TABLE MT_LANG
      FROM T002C AS C
      INNER JOIN T002T AS T
      ON C~SPRAS = T~SPRSL
      WHERE T~SPRAS = SY-LANGU
      ORDER BY C~LADATUM DESCENDING C~LAUZEIT DESCENDING.
  ENDMETHOD.                    "init_lang

  METHOD SUPPRESS_RUN_BUTTON.
    DATA ITAB TYPE TABLE OF SY-UCOMM.
    APPEND: 'ONLI' TO ITAB.
    CALL FUNCTION 'RS_SET_SELSCREEN_STATUS'
      EXPORTING
        P_STATUS  = SY-PFKEY
      TABLES
        P_EXCLUDE = ITAB.
  ENDMETHOD.                    "suppress_run_button

  METHOD F4.
    DATA: LT_DYNPFIELDS TYPE DYNPREAD_TABTYPE,
          LS_DYNPFIELDS TYPE DYNPREAD.
    LS_DYNPFIELDS-FIELDNAME = 'GV_TNAME'.
    APPEND LS_DYNPFIELDS TO LT_DYNPFIELDS.
    CALL FUNCTION 'DYNP_VALUES_READ'
      EXPORTING
        DYNAME     = SY-CPROG
        DYNUMB     = SY-DYNNR
      TABLES
        DYNPFIELDS = LT_DYNPFIELDS.

    READ TABLE LT_DYNPFIELDS INDEX 1 INTO LS_DYNPFIELDS TRANSPORTING FIELDVALUE.
    CALL FUNCTION 'F4_DD_TABLES'
      EXPORTING
        OBJECT = LS_DYNPFIELDS-FIELDVALUE
      IMPORTING
        RESULT = GV_TNAME.
  ENDMETHOD.                    "f4

  METHOD EXIST_TABLE.
    E_SUBRC = 4.
    CALL FUNCTION 'DD_EXIST_TABLE'
      EXPORTING
        TABNAME      = GV_TNAME
        STATUS       = 'A'
      IMPORTING
        SUBRC        = E_SUBRC
      EXCEPTIONS
        WRONG_STATUS = 1
        OTHERS       = 2.
  ENDMETHOD.                    "exist_table
ENDCLASS.                    "lcl_appl IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_dragdrop IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS LCL_DRAGDROP IMPLEMENTATION.
  METHOD DRAG.
    DATA: DATAOBJ TYPE REF TO LCL_DD_DATA.
    CREATE OBJECT DATAOBJ.
    DATAOBJ->M_ROW = E_ROW-INDEX.
    DATAOBJ->M_COLUMN = E_COLUMN.
    E_DRAGDROPOBJ->OBJECT = DATAOBJ.
  ENDMETHOD.                    "drag

  METHOD DROP.
    DATA: LO_FROM_SEL     TYPE REF TO LCL_SEL_OPT,
          LO_FROM_TAB     TYPE REF TO LCL_TABLE_VIEWER,
          LO_TO           TYPE REF TO LCL_SEL_OPT,
          LO_ALV          TYPE REF TO CL_GUI_ALV_GRID,
          LT_SEL_ROWS     TYPE LVC_T_ROW,
          LT_SEL_CELLS    TYPE LVC_T_CELL,
          LT_SEL_COL      TYPE LVC_T_COL,
          LS_ROW          TYPE T_SEL_ROW,
          LV_SET_RECEIVER.

    DATA LO TYPE LCL_APPL=>T_OBJ.
    LOOP AT LCL_APPL=>MT_OBJ INTO LO.
      "to
      IF LO-ALV_VIEWER->MO_SEL IS BOUND.
        IF E_DRAGDROPOBJ->DROPTARGETCTRL = LO-ALV_VIEWER->MO_SEL->MO_SEL_ALV.
          LO_TO = LO-ALV_VIEWER->MO_SEL.
        ENDIF.
      ENDIF.

      "from tab
      IF LO-ALV_VIEWER->MO_ALV = E_DRAGDROPOBJ->DRAGSOURCECTRL.
        LO_FROM_TAB = LO-ALV_VIEWER.
        CONTINUE.
      ENDIF.

      CHECK LO-ALV_VIEWER->MO_SEL IS BOUND.
      IF E_DRAGDROPOBJ->DRAGSOURCECTRL = LO-ALV_VIEWER->MO_SEL->MO_SEL_ALV.
        LO_FROM_SEL = LO-ALV_VIEWER->MO_SEL.
        LO-ALV_VIEWER->MO_SEL->MO_SEL_ALV->GET_SELECTED_ROWS( IMPORTING ET_INDEX_ROWS = LT_SEL_ROWS ).
        LO-ALV_VIEWER->MO_SEL->MO_SEL_ALV->GET_SELECTED_CELLS( IMPORTING ET_CELL = LT_SEL_CELLS ).
      ENDIF.
    ENDLOOP.

    IF LO_FROM_TAB IS BOUND." tab to select
      FIELD-SYMBOLS: <F_TAB>   TYPE STANDARD TABLE,
                     <F_STR>   TYPE ANY,
                     <F_FIELD> TYPE ANY.
      LO_FROM_TAB->MO_ALV->GET_SELECTED_CELLS( IMPORTING ET_CELL = LT_SEL_CELLS  ).
      LO_FROM_TAB->MO_ALV->GET_SELECTED_COLUMNS( IMPORTING ET_INDEX_COLUMNS = LT_SEL_COL  ).

      DATA L_COL TYPE LVC_S_COL.
      LOOP AT LT_SEL_COL INTO L_COL.
        FIELD-SYMBOLS <CATALOG> TYPE LVC_S_FCAT.
        READ TABLE LO_FROM_TAB->MO_ALV_CATALOG WITH KEY FIELDNAME = L_COL-FIELDNAME ASSIGNING <CATALOG>.
        IF SY-SUBRC = 0.
          <CATALOG>-STYLE =  CL_GUI_ALV_GRID=>MC_STYLE_BUTTON.
        ENDIF.
        FIELD-SYMBOLS <EMITTER> TYPE LCL_TABLE_VIEWER=>T_COLUMN_EMITTER.
        READ TABLE LO_FROM_TAB->MO_COLUMN_EMITTERS WITH KEY COLUMN = L_COL ASSIGNING <EMITTER>.
        IF SY-SUBRC NE 0.
          APPEND INITIAL LINE TO LO_FROM_TAB->MO_COLUMN_EMITTERS ASSIGNING <EMITTER>.
          <EMITTER>-COLUMN = L_COL.
          CREATE OBJECT <EMITTER>-EMITTER.
        ENDIF.
      ENDLOOP.

      IF SY-SUBRC = 0.
        LV_SET_RECEIVER = ABAP_TRUE.
        CALL METHOD LO_FROM_TAB->MO_ALV->SET_FRONTEND_FIELDCATALOG
          EXPORTING
            IT_FIELDCATALOG = LO_FROM_TAB->MO_ALV_CATALOG.
      ENDIF.

      ASSIGN LO_FROM_TAB->MR_TABLE->* TO <F_TAB>.
      FIELD-SYMBOLS <TO_TAB> TYPE LCL_SEL_OPT=>SELECTION_DISPLAY_S.
      READ TABLE LO_TO->MO_SEL_TAB ASSIGNING <TO_TAB> INDEX E_ROW.
      DATA L_CELL TYPE LVC_S_CELL.
      LOOP AT LT_SEL_CELLS INTO L_CELL.
        IF SY-TABIX = 1.
          DATA: L_COLNAME TYPE LVC_FNAME.
          L_COLNAME = L_CELL-COL_ID-FIELDNAME.
        ENDIF.
        READ TABLE <F_TAB> INDEX L_CELL-ROW_ID ASSIGNING <F_STR>.
        ASSIGN COMPONENT L_COLNAME OF STRUCTURE <F_STR> TO <F_FIELD>.
        IF SY-SUBRC = 0.
          IF LV_SET_RECEIVER IS NOT INITIAL.
            IF <TO_TAB>-RECEIVER IS BOUND.
              <TO_TAB>-RECEIVER->SHUT_DOWN( ).
            ENDIF.
            CREATE OBJECT <TO_TAB>-RECEIVER
              EXPORTING
                IO_TRANSMITTER = <EMITTER>-EMITTER
                I_FROM_FIELD   = L_COLNAME
                I_TO_FIELD     = <TO_TAB>-FIELD_LABEL
                IO_SEL_TO      = LO_TO
                IO_TAB_FROM    = LO_FROM_TAB.
            SET HANDLER <TO_TAB>-RECEIVER->ON_GRID_BUTTON_CLICK FOR LO_FROM_TAB->MO_ALV.
          ENDIF.

          IF <TO_TAB>-RANGE IS INITIAL.
            <TO_TAB>-LOW = <F_FIELD>.
          ENDIF.
          READ TABLE <TO_TAB>-RANGE WITH KEY LOW = <F_FIELD> TRANSPORTING NO FIELDS.
          IF SY-SUBRC NE 0.
            DATA LS_RANGE TYPE AQADH_S_RANGES.
            LS_RANGE-SIGN = 'I'.
            LS_RANGE-LOW = <F_FIELD>.
            APPEND LS_RANGE TO <TO_TAB>-RANGE.
          ENDIF.
        ENDIF.
      ENDLOOP.
      LO_TO->UPDATE_SEL_ROW( CHANGING C_SEL_ROW = <TO_TAB> ).
    ENDIF.

    "select to select
    IF LO_FROM_SEL NE LO_TO.
      IF LT_SEL_ROWS[] IS INITIAL.
        DELETE LT_SEL_CELLS WHERE COL_ID NE 'FIELD_LABEL'.
        DATA L_SEL TYPE LVC_S_CELL.
        LOOP AT LT_SEL_CELLS INTO L_SEL.
          FIELD-SYMBOLS <ROW> TYPE LVC_S_ROW.
          APPEND INITIAL LINE TO LT_SEL_ROWS ASSIGNING <ROW>.
          <ROW>-INDEX = L_SEL-ROW_ID-INDEX.
        ENDLOOP.
      ENDIF.

      LOOP AT LT_SEL_ROWS ASSIGNING <ROW>.
        FIELD-SYMBOLS <FROM_TAB> TYPE LCL_SEL_OPT=>SELECTION_DISPLAY_S.
        READ TABLE LO_FROM_SEL->MO_SEL_TAB ASSIGNING <FROM_TAB> INDEX <ROW>-INDEX."7/
        IF LINES( LT_SEL_ROWS ) = 1.
          READ TABLE LO_TO->MO_SEL_TAB ASSIGNING <TO_TAB> INDEX E_ROW.
        ELSE.
          READ TABLE LO_TO->MO_SEL_TAB ASSIGNING <TO_TAB> WITH KEY FIELD_LABEL = <FROM_TAB>-FIELD_LABEL.
          IF SY-SUBRC NE 0.
            CONTINUE.
          ENDIF.
        ENDIF.
        MOVE-CORRESPONDING <FROM_TAB> TO LS_ROW.
        MOVE-CORRESPONDING LS_ROW TO <TO_TAB>.
        <FROM_TAB>-EMITTER = ICON_WORKFLOW_EXTERNAL_EVENT.
        <TO_TAB>-INHERITED = ICON_BUSINAV_VALUE_CHAIN.
        IF <FROM_TAB>-TRANSMITTER IS INITIAL.
          CREATE OBJECT <FROM_TAB>-TRANSMITTER.
        ENDIF.
        IF <TO_TAB>-RECEIVER IS NOT INITIAL.
          <TO_TAB>-RECEIVER->SHUT_DOWN( ). "receiver clearing
          FREE <TO_TAB>-RECEIVER.
        ENDIF.
        CREATE OBJECT <TO_TAB>-RECEIVER
          EXPORTING
            IO_TRANSMITTER = <FROM_TAB>-TRANSMITTER
            IO_SEL_TO      = LO_TO
            I_TO_FIELD     = <TO_TAB>-FIELD_LABEL.
      ENDLOOP.
    ENDIF.

    LO_ALV ?= E_DRAGDROPOBJ->DRAGSOURCECTRL.
    LCL_ALV_COMMON=>REFRESH( LO_ALV ).

    LO_ALV ?= E_DRAGDROPOBJ->DROPTARGETCTRL.
    LCL_ALV_COMMON=>REFRESH( LO_ALV ).
    LO_TO->RAISE_SELECTION_DONE( ).
  ENDMETHOD.                    "drop
ENDCLASS.                    "lcl_dragdrop IMPLEMENTATION
"END OF INCLUDE YS_SDE_CLASSES.

*------------REPORT EVENTS--------------------
INITIALIZATION.
  %_GV_TNAME_%_APP_%-TEXT = 'Enter table name and hit Enter'.
  LCL_APPL=>INIT_LANG( ).
  LCL_APPL=>INIT_ICONS_TABLE( ).

AT SELECTION-SCREEN OUTPUT.
  LCL_APPL=>SUPPRESS_RUN_BUTTON( ).

AT SELECTION-SCREEN.
  CHECK LCL_APPL=>EXIST_TABLE( GV_TNAME ) = 0.
  FIELD-SYMBOLS <OBJ> TYPE LCL_APPL=>T_OBJ.
  APPEND INITIAL LINE TO LCL_APPL=>MT_OBJ ASSIGNING <OBJ>.
  CREATE OBJECT <OBJ>-ALV_VIEWER
    EXPORTING
      I_TNAME = GV_TNAME.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR GV_TNAME.
  LCL_APPL=>F4( ).
